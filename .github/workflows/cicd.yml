# 워크플로의 이름 지정
name: CICD for AWS EC2 using Docker

# 워크플로가 시작될 조건: main push, main pull request
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  EC2_SSH_USER: ubuntu
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/dgu-farmsystem
  CONTAINER_NAME: dgu-farmsystem-container

jobs:
  build:
    runs-on: ubuntu-24.04 # 실행 환경 지정 (Ubuntu 24.04 LTS)
    # 실행스텝지정
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Set up application.yml
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml

      # Gradle
      - name: Grant execute permission for gradlew and Build
        run: |
          chmod +x gradlew
          ./gradlew clean build

      # Docker
      - name: Login/Build/Push Docker Image
        run: |
          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
          docker build -f Dockerfile -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - name: Docker Image Pull & Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: | # 도커 script 80-8000인 컨테이너를 찾아 멈추고 dockerhub에서 이미지를 pull한뒤 실행
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080") 
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            sudo docker run --name ${{ env.CONTAINER_NAME }} -d -p 80:8080 -e TZ=Asia/Seoul ${{ env.DOCKER_IMAGE_NAME }}:latest